- name: Install dependencies.
  tags:
    - install
    - upgrade-charm
  apt: pkg={{ item }}
  with_items:
    - unzip

- name: check current symlink
  tags:
    - preload
  shell: readlink -f "{{ payload_dir}}/current"
  register: current_link

- name: Fail if trying to preload current revision
  tags:
    - preload
  fail:
    msg: "Cannot preload/overwrite currently used payload, rollback first"
  when: current_link.stdout == "{{ current_payload_dir }}"

- name: remove archive if forcing reload
  tags:
    - preload
  file:
    path: "{{ archives_dir }}/{{ payload_archive }}"
    state: absent
  when: force_asset_reload

- name: remove extracted payload if forcing reload
  tags:
    - preload
  file: 
    path: "{{ current_payload_dir }}"
    state: absent
  when: force_asset_reload

- name: Determine if the payload is already in place
  stat: path="{{ archives_dir }}/{{ payload_archive }}"
  tags:
    - config-changed
    - preload
  register: payload_exists

- name: Ensure payload directory exists
  tags:
    - config-changed
    - preload
  file:
    state: directory
    group: "{{ group }}"
    mode: 0644
    path: "{{ archives_dir }}/{{ payload_archive|dirname }}"
  when: not payload_exists.stat.exists

- name: Copy payload from the charm if not using base_uri
  tags:
    - config-changed
    - preload
  copy:
    src: "{{ charm_dir }}/files/{{ payload_archive|dirname }}"
    dest: "{{ archives_dir }}"
    force: no
    mode: 0644
    group: "{{ user }}"
  when: not payload_exists.stat.exists and base_uri == ""

- name: Generate an auth-token if required
  tags:
    - config-changed
    - preload
  uri:
    url: "{{ swift_auth_url }}/tokens"
    method: "POST"
    HEADER_Content-Type: "application/json"
    HEADER_Accept: "application/json"
    body: " {{ swift_credentials }}" # Note, the space seems to ensure the value is a string, rather than a dict :/
    return_content: "yes"
  register: auth_request
  when: not payload_exists.stat.exists and base_uri != "" and uri_auth_token == "" and swift_auth_url != ""

- name: Download payload from the payloads uri using a configured auth token
  tags:
    - config-changed
    - preload
  uri:
    url: "{{ base_uri }}/{{ payload_archive }}"
    HEADER_X-Auth-Token: "{{ uri_auth_token }}"
    dest: "{{ archives_dir }}/{{ payload_archive }}"
    mode: 0644
  when: not payload_exists.stat.exists and base_uri != "" and uri_auth_token != ""

- name: Download payload from the payloads uri using the generated auth token
  tags:
    - config-changed
    - preload
  uri:
    url: "{{ base_uri }}/{{ payload_archive }}"
    HEADER_X-Auth-Token: "{{ auth_request.json.access.token.id }}"
    dest: "{{ archives_dir }}/{{ payload_archive }}"
    mode: 0644
  when: not payload_exists.stat.exists and base_uri != "" and uri_auth_token == "" and "json" in auth_request

- name: Check if archive is already extracted
  tags:
    - config-changed
    - preload
  stat: path={{ current_payload_dir }}/EXTRACTED
  register: already_extracted

- name: create dir to extract
  tags:
    - config-changed
    - preload
  file: 
    path: "{{ current_payload_dir }}" 
    state: directory
    group: "{{ group }}"
  when: already_extracted.stat.exists == False

- name: Extract payload.
  tags:
    - config-changed
    - preload
  unarchive:
    src: "{{ archives_dir }}/{{ payload_archive }}"
    dest: "{{ current_payload_dir }}"
    group: "{{ group }}"
    copy: no
  when: already_extracted.stat.exists == False

- name: Touch a file to ensure that we don't extract the same archive again.
  tags:
    - config-changed
    - preload
  command: /usr/bin/touch {{ current_payload_dir }}/EXTRACTED
  when: already_extracted.stat.exists == False

- name: Symlink latest payload
  tags:
    - config-changed
  file:
    src: "{{ payload_dir }}/{{ payload_archive | dirname }}"
    dest: "{{ payload_dir }}/latest"
    state: link

- name: Check whether the set current symlink exists.
  tags:
    - config-changed
  stat: path={{ payload_dir }}/{{ current_symlink }}
  register: stat_current_symlink

- name: Fail if the configured current_symlink does not exist.
  tags:
    - config-changed
  fail: 
    msg: "The configured current_symlink does not exist, {{ payload_dir }}/{{ current_symlink }}"
  when: stat_current_symlink.stat.exists == False

- name: Check for any old payloads to remove
  tags:
    - config-changed
    - preload
  script: payloads-to-remove.py {{ payload_dir }}
  register: old_payloads

- name: Remove any old payloads
  tags:
    - config-changed
    - preload
  file:
    path: "{{ item }}"
    state: absent
  with_items: old_payloads.stdout_lines
